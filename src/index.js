require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

const BOT_TOKEN = process.env.BOT_TOKEN;
const API_URL = process.env.API_URL;
const CHANNEL_ID = '-1001751887491';
// const CHANNEL_ID = '-1002500459840';
const CHANNEL_LINK = 'https://t.me/CryptoWayX';

const bot = new Telegraf(BOT_TOKEN);

// üîç –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
async function isUserSubscribed(ctx) {
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏:', err.message);
    return false;
  }
}

// üü¢ –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  if (ctx.chat.type !== 'private') return;

  try {
    // await ctx.replyWithPhoto(
    //   { url: 'https://te.legra.ph/file/YOUR_IMAGE_ID.jpg' }, // ‚ö†Ô∏è –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    //   { caption: `üëã –ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name || '–¥—Ä—É–∂–µ'}!` }
    // );

    await ctx.reply(
      `–í—ñ—Ç–∞—é –≤ *Binance Alpha Points Checker Bot*! üöÄ\n\n` +
      `üîπ –û—Ç—Ä–∏–º—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ —Å–≤–æ—î–º—É –≥–∞–º–∞–Ω—Ü—é —ñ –Ω–µ —Ä–∞—Ö—É–π –Ω–∞ –ø–∞–ª—å—Ü—è—Ö ü§ñ:\n\n` +
      `‚Ä¢ üìä *–û–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤*\n` +
      `‚Ä¢ üéØ *Alpha Points*\n` +
      `‚Ä¢ üìâ *PnL (–ø—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫)*\n\n` +
      `‚ö†Ô∏è –ü—Ä–∏–º—ñ—Ç–∫–∞: –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è —â–æ–¥–Ω—è. –ë–æ—Ç –ø–æ–∫–∞–∑—É—î –ª–∏—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Ç–æ—á–Ω—É –¥–æ–±—É.\n\n` +
      `–©–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –±–æ—Ç–æ–º ‚Äî –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëá`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ CryptoWay', CHANNEL_LINK)],
          [Markup.button.callback('‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è', 'check_sub')]
        ])
      }
    );
  } catch (error) {
    console.error('‚ùå Error in start:', error);
  }
});

// üü° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø—Ü—ñ
bot.action('check_sub', async (ctx) => {
  const subscribed = await isUserSubscribed(ctx);

  if (subscribed) {
    await ctx.reply('‚úÖ –î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –ù–∞–¥—ñ—à–ª–∏ –∞–¥—Ä–µ—Å—É —Å–≤–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è (0x...).');
  } else {
    await ctx.reply('‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–µ —Ä–∞–∑.');
  }
});

// üîé –û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏
bot.on('text', async (ctx) => {
  if (ctx.chat.type !== 'private') return;

  const address = ctx.message.text.trim();

  if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
    return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∞–¥—Ä–µ—Å–∞. –ü–µ—Ä–µ–≤—ñ—Ä, —â–æ —Ü–µ EVM-–∞–¥—Ä–µ—Å–∞ (0x...)');
  }

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.reply('‚ùóÔ∏è –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ CryptoWay', CHANNEL_LINK)],
          [Markup.button.callback('‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è', 'check_sub')]
        ])
      });
  }

  await ctx.reply('‚è≥ –ó–±–∏—Ä–∞—é –¥–∞–Ω—ñ, –∑–∞—á–µ–∫–∞–π...');

  try {
    const { data } = await axios.get(`${API_URL}?address=${address}`);

    if (!data || !data.volume) {
      return ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä –∞–¥—Ä–µ—Å—É.');
    }

    await ctx.reply(
      `üìä *Alpha Wallet Stats:*\n\n` +
      `üíµ –û–±—Å—è–≥:  *${data.volume}*\n` +
      `üéØ –ü–æ—ñ–Ω—Ç–∏: *${data.points}*\n` +
      `üìâ PnL:    *${data.profit}*`,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    console.error('‚ùå API error:', err);
    await ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

// üöÄ –ó–∞–ø—É—Å–∫
bot.launch();
console.log('ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î');
